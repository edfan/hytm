decl TAS_lock (lock_t * i32)-> void;
decl TAS_unlock(lock_t * i32) -> void;
decl TAS_not_taken(lock_t * i32) -> bool;
decl TAS_try_acquire_lock (lock_t * i32) -> bool;

var lock i32 = 0;
var  THRESHOLD i32 = 4;
// should be u32 but def can't compare u32?
var _XBEGIN_STARTED i32 = 0;

def _xend() -> void
begin
end

def _xbegin() -> i32
begin
return 0;
end


export def our_xbegin() -> void
begin
start:
  for var i i32 = 0; i < THRESHOLD; ++i do
    if _xbegin() == _XBEGIN_STARTED then
      while (!TAS_not_taken(&lock)) do
      od
      return;
    fi
  od
  if TAS_try_acquire_lock(&lock) then
    return;
  fi
  goto start;
end

export def our_xend() -> void
begin
    if TAS_not_taken(&lock) then
      _xend();
    else
      TAS_unlock(&lock);
    fi
end
